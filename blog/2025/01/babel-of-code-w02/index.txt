1:"$Sreact.fragment"
2:I[1544,["177","static/chunks/app/layout-cb5038e2af1ab31b.js"],"AsciiArtLogger"]
3:I[2738,["177","static/chunks/app/layout-cb5038e2af1ab31b.js"],"ThemeProvider"]
4:I[7555,[],""]
5:I[1295,[],""]
6:I[9543,["345","static/chunks/app/not-found-374964195ecf67e5.js"],"default"]
8:I[9665,[],"MetadataBoundary"]
a:I[9665,[],"OutletBoundary"]
d:I[4911,[],"AsyncMetadataOutlet"]
f:I[9665,[],"ViewportBoundary"]
11:I[6614,[],""]
:HL["/_next/static/css/09dfadb69bdaa005.css","style"]
:HL["/_next/static/css/ac9b4cc367c17784.css","style"]
:HL["/_next/static/css/72f0b751ba818b6f.css","style"]
0:{"P":null,"b":"PRuMAV6fiY333i2WQTmTa","p":"","c":["","blog","2025","01","babel-of-code-w02",""],"i":false,"f":[[["",{"children":["blog",{"children":[["slug","2025/01/babel-of-code-w02","c"],{"children":["__PAGE__",{}]}]}]},"$undefined","$undefined",true],["",["$","$1","c",{"children":[[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/09dfadb69bdaa005.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}],["$","link","1",{"rel":"stylesheet","href":"/_next/static/css/ac9b4cc367c17784.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","html",null,{"lang":"en","suppressHydrationWarning":true,"children":[["$","head",null,{"children":[["$","link",null,{"rel":"icon","href":"/favicon.ico","sizes":"any"}],["$","link",null,{"rel":"apple-touch-icon","href":"/apple-touch-icon.png"}]]}],["$","body",null,{"children":[["$","$L2",null,{}],["$","$L3",null,{"children":["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","$L6",null,{}],[]],"forbidden":"$undefined","unauthorized":"$undefined"}]}]]}]]}]]}],{"children":["blog",["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":[["slug","2025/01/babel-of-code-w02","c"],["$","$1","c",{"children":[null,["$","$L4",null,{"parallelRouterKey":"children","error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","forbidden":"$undefined","unauthorized":"$undefined"}]]}],{"children":["__PAGE__",["$","$1","c",{"children":["$L7",["$","$L8",null,{"children":"$L9"}],[["$","link","0",{"rel":"stylesheet","href":"/_next/static/css/72f0b751ba818b6f.css","precedence":"next","crossOrigin":"$undefined","nonce":"$undefined"}]],["$","$La",null,{"children":["$Lb","$Lc",["$","$Ld",null,{"promise":"$@e"}]]}]]}],{},null,false]},null,false]},null,false]},null,false],["$","$1","h",{"children":[null,["$","$1","dPUvvYWEseoA_Nzn8oKuQ",{"children":[["$","$Lf",null,{"children":"$L10"}],null]}],null]}],false]],"m":"$undefined","G":["$11","$undefined"],"s":false,"S":true}
12:"$Sreact.suspense"
13:I[4911,[],"AsyncMetadata"]
9:["$","$12",null,{"fallback":null,"children":["$","$L13",null,{"promise":"$@14"}]}]
c:null
10:[["$","meta","0",{"charSet":"utf-8"}],["$","meta","1",{"name":"viewport","content":"width=device-width, initial-scale=1"}]]
b:null
14:{"metadata":[["$","title","0",{"children":"Solving AoC in Watcom C/C++ | @unjello blog"}],["$","meta","1",{"name":"description","content":"Let's implement 2024/day/2 Advent of Code puzzle in Watcom C/C++. BabelOfCode is low key. The goal is to solve each Advent of Code puzzle in a different language."}],["$","meta","2",{"property":"og:title","content":"Solving AoC in Watcom C/C++ | @unjello blog"}],["$","meta","3",{"property":"og:description","content":"Let's implement 2024/day/2 Advent of Code puzzle in Watcom C/C++. BabelOfCode is low key. The goal is to solve each Advent of Code puzzle in a different language."}],["$","meta","4",{"property":"og:url","content":"https://andrzej.lichnerowicz.pl/en/blog/2025/01/babel-of-code-w02/"}],["$","meta","5",{"property":"og:image","content":"https://andrzej.lichnerowicz.pl/images/2025/01/babel-of-code-w02/watcom.png"}],["$","meta","6",{"property":"og:image:width","content":"1200"}],["$","meta","7",{"property":"og:image:height","content":"630"}],["$","meta","8",{"property":"og:image:alt","content":"Solving AoC in Watcom C/C++ | @unjello blog"}],["$","meta","9",{"property":"og:type","content":"article"}],["$","meta","10",{"property":"article:published_time","content":"2025-01-12T23:54:15+02:00"}],["$","meta","11",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","12",{"name":"twitter:title","content":"Solving AoC in Watcom C/C++ | @unjello blog"}],["$","meta","13",{"name":"twitter:description","content":"Let's implement 2024/day/2 Advent of Code puzzle in Watcom C/C++. BabelOfCode is low key. The goal is to solve each Advent of Code puzzle in a different language."}],["$","meta","14",{"name":"twitter:image","content":"https://andrzej.lichnerowicz.pl/images/2025/01/babel-of-code-w02/watcom.png"}],["$","link","15",{"rel":"shortcut icon","href":"/favicon.ico"}],["$","link","16",{"rel":"icon","href":"/favicon.ico","sizes":"any"}],["$","link","17",{"rel":"apple-touch-icon","href":"/apple-touch-icon.png"}]],"error":null,"digest":"$undefined"}
e:{"metadata":"$14:metadata","error":null,"digest":"$undefined"}
15:I[8109,["72","static/chunks/72-d3fcf2c32f7e11b9.js","435","static/chunks/435-711aececbe1f0279.js","909","static/chunks/app/blog/%5B...slug%5D/page-fbf23c813c11eb87.js"],"ThemeSwitcher"]
17:I[6874,["72","static/chunks/72-d3fcf2c32f7e11b9.js","435","static/chunks/435-711aececbe1f0279.js","909","static/chunks/app/blog/%5B...slug%5D/page-fbf23c813c11eb87.js"],""]
18:I[1809,["72","static/chunks/72-d3fcf2c32f7e11b9.js","435","static/chunks/435-711aececbe1f0279.js","909","static/chunks/app/blog/%5B...slug%5D/page-fbf23c813c11eb87.js"],"AsciiBorderedMdx"]
16:T545,                              _______._ _
                      _ _.___/       |
                         |           |
                         |           |
             -----+-----                          ___     ___
                  |              ______   ___    /  /____    \
            __________ _-+-_____/ .(  .\_(xhb)__|  |(     \   |
           /.   |..   \..  ___/.\ . ) ..\ . ____\  |  o  / |  |
          |..    ).    |.  \    .|.(  ...|.(.   :  (____|  |  |
         (______/..    |.   \___.|______ . ______|..       | 9|
          )..          |.      |    ..   |..     \ .       | 9[
         ( .    o      |.      |     .\  |.       |. ___/ (|  ]
          \___________/..      |\_______/________/\_________\ [
               |_______________|  ____________________________]
                         :           |
    - -----andrzej-_ ____\_____|----_|_____________'-lichnerowicz-------- -
                         :           |
 .     p e r s o n a l ! |    #1     | wEBPAGE                            .
 . _         - --------- |  - -- -   | ------- -                         _  .
-:-\-\-------------------|- -     - -|-----------------------------------\-\-:
 |                      _|___________|_                                      |
 |                       :           :                                       |7:["$","div",null,{"className":"flex justify-center","children":["$","div",null,{"className":"ascii-art nfo-pre","children":[["$","$L15",null,{}],["$","div",null,{"className":"header-component","children":"$16"}]," |//_)-> 2 0 2 5 . 0 1 . 1 2 <--------------------------------------------(_\\|\n",[["$","div",null,{"className":"whitespace-pre font-mono","children":" |                                                                           |"}],["$","div",null,{"className":"whitespace-pre font-mono","children":" |                                                                           |"}],["$","div",null,{"className":"whitespace-pre font-mono","style":{"display":"flex"},"children":[" | ",["$","$L17",null,{"href":"/","className":"hover:underline inline-block","prefetch":false,"style":{"textDecoration":"none","color":"inherit","width":"calc(100% - 6ch)"},"children":"<< back                                                                     "}],"|"]}],["$","div",null,{"className":"whitespace-pre font-mono","children":" |                                                                           |"}]],["$","$L18",null,{"children":[["$","div",null,{"style":{"fontWeight":"bold","fontSize":"1.2em","marginTop":"1em","marginBottom":"2.5em"},"children":["# ","Solving AoC in Watcom C/C++"]}],"$L19"]}],"$7:props:children:props:children:3",["$","div",null,{"children":[" \\__                      --> ",["$","a",null,{"href":"http://andrzej.lichnerowicz.pl","target":"_blank","rel":"noopener noreferrer","title":"andrzej.lichnerowicz.pl","className":"link","style":{"cursor":"pointer"},"children":"andrzej.lichnerowicz.pl"}]," <--                  __/\n   //                                                                      \\\\\n  // ------------------------                        ---------------------- \\\\\n '~~~~~~~~~~~~~~~~~~~~~~~~~// ------         ------- \\~~~~~~~~~~~~~~~~~~~~~~`\n                          '~~~~~~~//          \\~~~~~~~`\n                                 // ---------- \\\n                                '~~~~~~~~~~~~~~~`\n      "]}]]}]}]
1a:I[316,["72","static/chunks/72-d3fcf2c32f7e11b9.js","435","static/chunks/435-711aececbe1f0279.js","909","static/chunks/app/blog/%5B...slug%5D/page-fbf23c813c11eb87.js"],"Figure"]
19:[["$","div",null,{"className":"MarkdownHeading_markdown-heading__G6B4T","children":[["$","span",null,{"className":"MarkdownHeading_markdown-hash__CheR_","children":["##"," "]}],["$","span",null,{"children":"Prerequisites"}]]}],"\n",["$","ol",null,{"children":["\n",["$","li",null,{"children":["$","a",null,{"href":"https://archive.org/details/Watcom_C_11.0","children":"Watcom C/C++ 11.0 Installer"}]}],"\n"]}],"\n",["$","div",null,{"className":"MarkdownHeading_markdown-heading__G6B4T","children":[["$","span",null,{"className":"MarkdownHeading_markdown-hash__CheR_","children":["##"," "]}],["$","span",null,{"children":"Installation"}]]}],"\n",["$","p",null,{"children":["This time, we have a CD, folks -- 650MiB of data. Some serious business indeed. And only this, as I never really found any proper manual for WATCOM. Only ",["$","a",null,{"href":"https://openwatcom.org/ftp/archive/11.0c/docs/cprogguide.pdf","children":"Programmers Guide"}]," that skims over basic compilation syntax for all the combinations of 16/32 bit and different pmode extenders."]}],"\n",["$","$L1a",null,{"src":"./watcom.png","alt":"Screenshot of DosBox-X with Watcom C/C++ 11.0 installation in progress.","caption":"Watcom C/C++ 11 installation","attribution":"Screenshot by author.","postSlug":"/blog/2025/01/babel-of-code-w02"}],"\n",["$","p",null,{"children":["The installer modifies ",null," and ",null,". The former doesn’t really affect us -- ",null," is managed by DosBox anyway. As for ",null,", we’re pulling its contents into a copy of a Makefile from the previous day:"]}],"\n",["","$L1b"],"\n",["$","p",null,{"children":"A quick side note: Watcom is really dear to my heart. I did my first serious software with it -- first demoscene code and first OSS tools. I don’t remember what happened to my very first Watcom version (10.0), but I still have the 11.0 CD after multiple apartment changes and other adventures in adulthood. I got the CD from the only place I could back then, the Russian flea market, because -- let’s face it -- there were hardly any official software channels in the mid-90s. I keep that CD as a lucky charm. I still remember being shocked to discover the turtle graphic wasn’t an official Sybase cover..."}],"\n",["$","$L1a",null,{"src":"./watcom11.jpeg","alt":"A photo of CD case and a disk with Watcom C++ 11","caption":"Russian edition of Watcom C/C++ 11","attribution":"Photo by author.","postSlug":"/blog/2025/01/babel-of-code-w02"}],"\n",["$","p",null,{"children":"Now that the tools are installed, let’s do a quick sanity-check compilation:"}],"\n",["","$L1c"],"\n",["$","p",null,{"children":"and..."}],"\n",["","$L1d"],"\n",["$","p",null,{"children":["Oops… guess who forgot that Watcom 11.0 was released in 1997 -- a whole year before the standard got, well, standardized. The ",["$","a",null,{"href":"https://en.wikipedia.org/wiki/Standard_Template_Library","children":"STL"}]," already existed (created around 1994 and released to the public domain by Hewlett Packard about a year later), but there was no ",null," namespace in Watcom 11.0. Muscle memory got me. After some thought, I decided to avoid the STL altogether. I’ve never really been a fan anyway (except maybe ",null,", which is nice, and ",null,", though that’s mostly because it was authored by a ",["$","a",null,{"href":"https://akrzemi1.wordpress.com/","children":"a friend"}]," I admire)."]}],"\n",["$","div",null,{"className":"MarkdownHeading_markdown-heading__G6B4T","children":[["$","span",null,{"className":"MarkdownHeading_markdown-hash__CheR_","children":["##"," "]}],["$","span",null,{"children":"The Puzzle"}]]}],"\n",["$","p",null,{"children":["And now, the ",["$","a",null,{"href":"https://adventofcode.com/2024/day/2","children":"puzzle"}],". The first part looks pretty straightforward: just a simple loop. ",null," consumes all the whitespace, and for the example data, it’s just regular 5-digit columns."]}],"\n",["","$L1e"],"\n",["$","p",null,{"children":["It works flawlessly with the example. But when I tried it on the real puzzle data, I got the wrong number. After closer inspection, the total records came out to ",null," when it should have been around ",null,". It turned out that production data doesn’t always have 5 columns; the records vary in length. I decided to read the whole line first, then use ",null," on that string."]}],"\n",["$","p",null,{"children":["There is one catch: I need to parse digits until EOF, but I don’t know how many there will be. That means I have to do it one by one. Like the rest of its family, ",null," returns the number of records parsed, so ",null," will return ",null,". The question is, how do I advance the string pointer after reading one integer? It turns out ",null," returns the number of characters read so far. That’s exactly what I need:"]}],"\n",["","$L1f"],"\n",["$","p",null,{"children":["Okay, now it works. On to the second part of the puzzle, which is a little trickier. I tried to be clever by just summing a sign function: ",null,", expecting that if I got one less than the total number of elements in the array, that would reveal the solution. So if for a 5-element array I get ",null,", for the array with one element removed I should get ",null," if it's safe... Turns out that didn't match up. Since the number of columns is small, I ended up using an ",["$","span",null,{"className":"katex","children":[["$","span",null,{"className":"katex-mathml","children":["$","math",null,{"xmlns":"http://www.w3.org/1998/Math/MathML","children":["$","semantics",null,{"children":[["$","mrow",null,{"children":[["$","mi",null,{"children":"O"}],["$","mo",null,{"stretchy":"false","children":"("}],["$","msup",null,{"children":[["$","mi",null,{"children":"N"}],["$","mn",null,{"children":"2"}]]}],["$","mo",null,{"stretchy":"false","children":")"}]]}],["$","annotation",null,{"encoding":"application/x-tex","children":"O(N^2)"}]]}]}]}],["$","span",null,{"className":"katex-html","aria-hidden":"true","children":["$","span",null,{"className":"base","children":[["$","span",null,{"className":"strut","style":{"height":"1.0641em","verticalAlign":"-0.25em"}}],["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.02778em"},"children":"O"}],["$","span",null,{"className":"mopen","children":"("}],["$","span",null,{"className":"mord","children":[["$","span",null,{"className":"mord mathnormal","style":{"marginRight":"0.10903em"},"children":"N"}],["$","span",null,{"className":"msupsub","children":["$","span",null,{"className":"vlist-t","children":["$","span",null,{"className":"vlist-r","children":["$","span",null,{"className":"vlist","style":{"height":"0.8141em"},"children":["$","span",null,{"style":{"top":"-3.063em","marginRight":"0.05em"},"children":[["$","span",null,{"className":"pstrut","style":{"height":"2.7em"}}],["$","span",null,{"className":"sizing reset-size6 size3 mtight","children":["$","span",null,{"className":"mord mtight","children":"2"}]}]]}]}]}]}]}]]}],["$","span",null,{"className":"mclose","children":")"}]]}]}]]}]," approach: test all permutations by removing one element at a time."]}],"\n",["","$L20"],"\n",["$","p",null,{"children":"And that’s it -- correct answer in hand. Can’t wait for next week... which happens to be tomorrow!"}]]
21:Tca1,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span>$(EXE): $(CPP_SRC)</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span>	@$(DOSBOX_CMD) -silent -nolog -nogui \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"><span>	    -c "MOUNT C $(ROOT_DIR)" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span>        -c "MOUNT $(TOOLS_MOUNT) $(TOOLS_INSTALL_PATH)" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"><span>        -c "PATH $(TOOLS_MOUNT):\WATC11\BINW;%path%" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span>        -c "SET INCLUDE=$(TOOLS_MOUNT):\WATC11\H" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span>        -c "SET WATCOM=$(TOOLS_MOUNT):\WATC11" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span>        -c "SET EDPATH=$(TOOLS_MOUNT):\WATC11\EDDAT" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span>        -c "C:" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span>        -c "WCL DAY02.CPP > WCL.TXT" \</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="11"><div class="code-ln-n" data-line-number="11"></div></td>
        <td class="code-ln-code" data-line-number="11"><span class="line"><span>        -c "exit" 2>/dev/null</span></span></td>
      </tr></tbody></table>1b:["$","pre",null,{"className":"language-plaintext pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$21"}}]}]
22:T116f,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">#include</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> &#x3C;stdio.h></span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">#include</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> &#x3C;iostream></span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#E36209;--shiki-dark:#FFAB70"> argc</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">char**</span><span style="color:#E36209;--shiki-dark:#FFAB70"> argv</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (argc </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">        std</span><span style="color:#24292E;--shiki-dark:#E1E4E8">::cout </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;&#x3C;</span><span style="color:#032F62;--shiki-dark:#9ECBFF"> "Usage: day02 &#x3C;file></span><span style="color:#005CC5;--shiki-dark:#79B8FF">\n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></td>
      </tr></tbody></table>1c:["$","pre",null,{"className":"language-cpp pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$22"}}]}]
23:T1645,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Watcom C/C</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#005CC5;--shiki-dark:#79B8FF">16</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Compile </span><span style="color:#D73A49;--shiki-dark:#F97583">and</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Link Utility Version </span><span style="color:#005CC5;--shiki-dark:#79B8FF">11.0</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Copyright by Sybase, Inc., and its subsidiaries, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1988</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1997</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">All rights reserved.  Watcom is a trademark of Sybase, Inc.</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">       wpp DAY02.CPP </span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Watcom C</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#005CC5;--shiki-dark:#79B8FF">16</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> Optimizing Compiler  Version </span><span style="color:#005CC5;--shiki-dark:#79B8FF">11.0</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> </span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Copyright by Sybase, Inc., and its subsidiaries, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1989</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1996</span><span style="color:#24292E;--shiki-dark:#E1E4E8">.</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">All rights reserved.  Watcom is a trademark of Sybase, Inc.</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">DAY02.</span><span style="color:#6F42C1;--shiki-dark:#B392F0">CPP</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">6</span><span style="color:#24292E;--shiki-dark:#E1E4E8">): Error</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> E241: </span><span style="color:#6F42C1;--shiki-dark:#B392F0">col</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#005CC5;--shiki-dark:#79B8FF">14</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#6A737D;--shiki-dark:#6A737D">'class std' has not been declared </span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">DAY02.CPP: </span><span style="color:#005CC5;--shiki-dark:#79B8FF">10</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> lines, included </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1922</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, no warnings, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> error</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">Error: Compiler returned a bad </span><span style="color:#005CC5;--shiki-dark:#79B8FF">status</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> compiling </span><span style="color:#6A737D;--shiki-dark:#6A737D">'DAY02.CPP'</span></span></td>
      </tr></tbody></table>1d:["$","pre",null,{"className":"language-cmd pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$23"}}]}]
24:T3c30,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> is_safe_level</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">int*</span><span style="color:#E36209;--shiki-dark:#FFAB70"> v</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">size_t</span><span style="color:#E36209;--shiki-dark:#FFAB70"> len</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (len </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 2</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sign </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> get_sign</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">], v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> len </span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> a </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> v[i];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> v[i</span><span style="color:#D73A49;--shiki-dark:#F97583">+</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> diff </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> abs</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(a </span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> b);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        const</span><span style="color:#D73A49;--shiki-dark:#F97583"> int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> s </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> get_sign</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(a, b);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (s </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> sign </span><span style="color:#D73A49;--shiki-dark:#F97583">||</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> diff </span><span style="color:#D73A49;--shiki-dark:#F97583">></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 3</span><span style="color:#D73A49;--shiki-dark:#F97583"> ||</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> diff </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="11"><div class="code-ln-n" data-line-number="11"></div></td>
        <td class="code-ln-code" data-line-number="11"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="12"><div class="code-ln-n" data-line-number="12"></div></td>
        <td class="code-ln-code" data-line-number="12"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="13"><div class="code-ln-n" data-line-number="13"></div></td>
        <td class="code-ln-code" data-line-number="13"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="14"><div class="code-ln-n" data-line-number="14"></div></td>
        <td class="code-ln-code" data-line-number="14"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> main</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#E36209;--shiki-dark:#FFAB70"> argc</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">char**</span><span style="color:#E36209;--shiki-dark:#FFAB70"> argv</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="15"><div class="code-ln-n" data-line-number="15"></div></td>
        <td class="code-ln-code" data-line-number="15"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // [...]</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="16"><div class="code-ln-n" data-line-number="16"></div></td>
        <td class="code-ln-code" data-line-number="16"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> c;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="17"><div class="code-ln-n" data-line-number="17"></div></td>
        <td class="code-ln-code" data-line-number="17"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">5</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="18"><div class="code-ln-n" data-line-number="18"></div></td>
        <td class="code-ln-code" data-line-number="18"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    do</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="19"><div class="code-ln-n" data-line-number="19"></div></td>
        <td class="code-ln-code" data-line-number="19"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#D73A49;--shiki-dark:#F97583"> sizeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v)</span><span style="color:#D73A49;--shiki-dark:#F97583">/sizeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]); i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) c</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fscanf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">%d</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">v[i]);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="20"><div class="code-ln-n" data-line-number="20"></div></td>
        <td class="code-ln-code" data-line-number="20"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (c </span><span style="color:#D73A49;--shiki-dark:#F97583">==</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> EOF) </span><span style="color:#D73A49;--shiki-dark:#F97583">break</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="21"><div class="code-ln-n" data-line-number="21"></div></td>
        <td class="code-ln-code" data-line-number="21"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    </span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="22"><div class="code-ln-n" data-line-number="22"></div></td>
        <td class="code-ln-code" data-line-number="22"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">is_safe_level</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v, </span><span style="color:#D73A49;--shiki-dark:#F97583">sizeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v)</span><span style="color:#D73A49;--shiki-dark:#F97583">/sizeof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">]))) part1_count</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="23"><div class="code-ln-n" data-line-number="23"></div></td>
        <td class="code-ln-code" data-line-number="23"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    } </span><span style="color:#D73A49;--shiki-dark:#F97583">while</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">!</span><span style="color:#6F42C1;--shiki-dark:#B392F0">feof</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(fp));</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="24"><div class="code-ln-n" data-line-number="24"></div></td>
        <td class="code-ln-code" data-line-number="24"><span class="line"><span style="color:#6A737D;--shiki-dark:#6A737D">    // [...]</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="25"><div class="code-ln-n" data-line-number="25"></div></td>
        <td class="code-ln-code" data-line-number="25"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></td>
      </tr></tbody></table>1e:["$","pre",null,{"className":"language-cpp pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$24"}}]}]
25:T2726,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> c;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">30</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">char</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> line[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1024</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">char</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> newline;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> part1_count </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, total </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">while</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#6F42C1;--shiki-dark:#B392F0">fgets</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(line, sizeof line, fp) </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> NULL</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> count </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, characters_read </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    char</span><span style="color:#D73A49;--shiki-dark:#F97583"> *</span><span style="color:#24292E;--shiki-dark:#E1E4E8">buf </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> line;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    while</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ((c </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> sscanf</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(buf, </span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#005CC5;--shiki-dark:#79B8FF">%d%n</span><span style="color:#032F62;--shiki-dark:#9ECBFF">"</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">v[count], </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8">characters_read)) </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> EOF </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x26;&#x26;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> c </span><span style="color:#D73A49;--shiki-dark:#F97583">></span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="11"><div class="code-ln-n" data-line-number="11"></div></td>
        <td class="code-ln-code" data-line-number="11"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        buf </span><span style="color:#D73A49;--shiki-dark:#F97583">+=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> characters_read;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="12"><div class="code-ln-n" data-line-number="12"></div></td>
        <td class="code-ln-code" data-line-number="12"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        count</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="13"><div class="code-ln-n" data-line-number="13"></div></td>
        <td class="code-ln-code" data-line-number="13"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="14"><div class="code-ln-n" data-line-number="14"></div></td>
        <td class="code-ln-code" data-line-number="14"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="15"><div class="code-ln-n" data-line-number="15"></div></td>
        <td class="code-ln-code" data-line-number="15"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">is_safe_level</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v, count)) part1_count</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="16"><div class="code-ln-n" data-line-number="16"></div></td>
        <td class="code-ln-code" data-line-number="16"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="17"><div class="code-ln-n" data-line-number="17"></div></td>
        <td class="code-ln-code" data-line-number="17"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    memset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(line, sizeof line, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="18"><div class="code-ln-n" data-line-number="18"></div></td>
        <td class="code-ln-code" data-line-number="18"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">    memset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v, sizeof v, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="19"><div class="code-ln-n" data-line-number="19"></div></td>
        <td class="code-ln-code" data-line-number="19"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    total</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="20"><div class="code-ln-n" data-line-number="20"></div></td>
        <td class="code-ln-code" data-line-number="20"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></td>
      </tr></tbody></table>1f:["$","pre",null,{"className":"language-cpp pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$25"}}]}]
26:T1ed1,<table class="code-ln-table"><tbody><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="1"><div class="code-ln-n" data-line-number="1"></div></td>
        <td class="code-ln-code" data-line-number="1"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">bool</span><span style="color:#6F42C1;--shiki-dark:#B392F0"> is_safe_level_dampener</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#D73A49;--shiki-dark:#F97583"> *</span><span style="color:#E36209;--shiki-dark:#FFAB70">v</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, </span><span style="color:#D73A49;--shiki-dark:#F97583">size_t</span><span style="color:#E36209;--shiki-dark:#FFAB70"> len</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="2"><div class="code-ln-n" data-line-number="2"></div></td>
        <td class="code-ln-code" data-line-number="2"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">is_safe_level</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v, len)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="3"><div class="code-ln-n" data-line-number="3"></div></td>
        <td class="code-ln-code" data-line-number="3"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="4"><div class="code-ln-n" data-line-number="4"></div></td>
        <td class="code-ln-code" data-line-number="4"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> modified_v[</span><span style="color:#005CC5;--shiki-dark:#79B8FF">30</span><span style="color:#24292E;--shiki-dark:#E1E4E8">];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="5"><div class="code-ln-n" data-line-number="5"></div></td>
        <td class="code-ln-code" data-line-number="5"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ex </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> 0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; ex </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> len; ex</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="6"><div class="code-ln-n" data-line-number="6"></div></td>
        <td class="code-ln-code" data-line-number="6"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        for</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#D73A49;--shiki-dark:#F97583">int</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> i</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">, j</span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">; i </span><span style="color:#D73A49;--shiki-dark:#F97583">&#x3C;</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> len; i</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">) {</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="7"><div class="code-ln-n" data-line-number="7"></div></td>
        <td class="code-ln-code" data-line-number="7"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">            if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (i </span><span style="color:#D73A49;--shiki-dark:#F97583">!=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> ex) modified_v[j</span><span style="color:#D73A49;--shiki-dark:#F97583">++</span><span style="color:#24292E;--shiki-dark:#E1E4E8">] </span><span style="color:#D73A49;--shiki-dark:#F97583">=</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> v[i];</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="8"><div class="code-ln-n" data-line-number="8"></div></td>
        <td class="code-ln-code" data-line-number="8"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">        }</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="9"><div class="code-ln-n" data-line-number="9"></div></td>
        <td class="code-ln-code" data-line-number="9"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">        if</span><span style="color:#24292E;--shiki-dark:#E1E4E8"> (</span><span style="color:#6F42C1;--shiki-dark:#B392F0">is_safe_level</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(modified_v, len</span><span style="color:#D73A49;--shiki-dark:#F97583">-</span><span style="color:#005CC5;--shiki-dark:#79B8FF">1</span><span style="color:#24292E;--shiki-dark:#E1E4E8">)) </span><span style="color:#D73A49;--shiki-dark:#F97583">return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> true</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="10"><div class="code-ln-n" data-line-number="10"></div></td>
        <td class="code-ln-code" data-line-number="10"><span class="line"><span style="color:#6F42C1;--shiki-dark:#B392F0">        memset</span><span style="color:#24292E;--shiki-dark:#E1E4E8">(v, sizeof v, </span><span style="color:#005CC5;--shiki-dark:#79B8FF">0</span><span style="color:#24292E;--shiki-dark:#E1E4E8">);</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="11"><div class="code-ln-n" data-line-number="11"></div></td>
        <td class="code-ln-code" data-line-number="11"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">    }</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="12"><div class="code-ln-n" data-line-number="12"></div></td>
        <td class="code-ln-code" data-line-number="12"><span class="line"></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="13"><div class="code-ln-n" data-line-number="13"></div></td>
        <td class="code-ln-code" data-line-number="13"><span class="line"><span style="color:#D73A49;--shiki-dark:#F97583">    return</span><span style="color:#005CC5;--shiki-dark:#79B8FF"> false</span><span style="color:#24292E;--shiki-dark:#E1E4E8">;</span></span></td>
      </tr><tr class="code-ln-line">
        <td class="code-ln-numbers" data-line-number="14"><div class="code-ln-n" data-line-number="14"></div></td>
        <td class="code-ln-code" data-line-number="14"><span class="line"><span style="color:#24292E;--shiki-dark:#E1E4E8">}</span></span></td>
      </tr></tbody></table>20:["$","pre",null,{"className":"language-cpp pre-code-block shiki github-light github-dark","children":["$","code",null,{"dangerouslySetInnerHTML":{"__html":"$26"}}]}]
